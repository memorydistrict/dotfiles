local nnoremap = require('user.keymaps.utils').nnoremap
local vnoremap = require('user.keymaps.utils').vnoremap
local inoremap = require('user.keymaps.utils').inoremap
local tnoremap = require('user.keymaps.utils').tnoremap
local xnoremap = require('user.keymaps.utils').xnoremap
local harpoon_ui = require('harpoon.ui')
local harpoon_mark = require('harpoon.mark')
local conform = require('conform')
local utils = require('user.utils')

local M = {}

local TERM = os.getenv('TERM')

--  Disable `<Space>` bar, to avoid `<Leader>` interference
nnoremap('<Space>', '<nop>')

--  Window + better kitty navigation
nnoremap('<C-j>', function()
    if vim.fn.exists(':KittyNavigationDown') ~= 0 and TERM == "xterm-kitty" then
        vim.cmd.KittyNavigationDown()
    elseif vim.fn.exists(':NvimTmuxNavigationDown') ~= 0 then
        vim.cmd.NvimTmuxNavigationDown()
    else
        vim.cmd.wincmd('j')
    end
end)

nnoremap('<C-k>', function()
    if vim.fn.exists(':KittyNavigationUp') ~= 0 and TERM == "xterm-kitty" then
        vim.cmd.KittyNavigationUp()
    elseif vim.fn.exists(':NvimTmuxNavigationUp') ~= 0 then
        vim.cmd.NvimTmuxNavigationUp()
    else
        vim.cmd.wincmd('k')
    end
end)

nnoremap('<C-l>', function()
    if vim.fn.exists(':KittyNavigationRight') ~= 0 and TERM == "xterm-kitty" then
        vim.cmd.KittyNavigationRight()
    elseif vim.fn.exists(':NvimTmuxNavigationRight') ~= 0 then
        vim.cmd.NvimTmuxNavigationRight()
    else
        vim.cmd.wincmd('l')
    end
end)

nnoremap('<C-h>', function()
    if vim.fn.exists(':KittyNavigationLeft') ~= 0 and TERM == "xterm-kitty" then
        vim.cmd.KittyNavigationLeft()
    elseif vim.fn.exists(':NvimTmuxNavigationLeft') ~= 0 then
        vim.cmd.NvimTmuxNavigationLeft()
    else
        vim.cmd.wincmd('h')
    end
end)

--  Swap between last two buffers
nnoremap("<leader>'", '<C-^>', { desc = "Switch to last buffer" })

--  Save with leader key
nnoremap('<leader>w', '<cmd>w<cr>', { silent = false })

--  Quit with the leader key
nnoremap('<leader>q', '<cmd>q<cr>', { silent = false })

--  Save and quit with the leader key
nnoremap('<leader>z', '<cmd>wq<cr>', { silent = false })

--  Map Oil to `<leader>e`
nnoremap('<leader>e', function()
    require('oil').toggle_float()
end)

--  Center buffer while navigating
nnoremap('<C-u>', '<C-u>zz')
nnoremap('<C-d>', '<C-d>zz')
nnoremap('{', '{zz')
nnoremap('}', '}zz')
nnoremap('N', 'Nzz') 
nnoremap('n', 'nzz')
nnoremap('G', 'Gzz')
nnoremap('gg', 'ggzz')
nnoremap('<C-i>', '<C-i>zz')
nnoremap('<C-o>', '<C-o>zz')
nnoremap('%', '%zz')
nnoremap('*', '*zz')
nnoremap('#', '#zz')

--  Press `S` for quick find/replace, for the term under the cursor
nnoremap('S', function()
    local cmd = ':%s/<C-r><C-w>/<C-r><C-w>/gI<Left><Left><Left>'
    local keys = vim.api.nvim_replace_termcodes(cmd, true, false, true)

    vim.api.nvim_feedkeys(keys, 'n', false)
end)

--  Open Spectre for global find/replace
nnoremap('<leader>S', function()
    require('spectre').toggle()
end)

--  Open Spectre for global find/replace, for the term under the cursor
--  FIX:    Currently being overridden by Telescope
nnoremap('<leader>sw', function()
    require('spectre').open_visual({
        select_word = true
    })
end, { desc = "Search current word" })

--  Press `H`, `L` to jump to start/end of a line (first/last char)
--  TODO:   Use <Home>
nnoremap('H', '^')
--  TODO:   Use <End>
nnoremap('L', '$')

--  Redo
nnoremap('U', '<C-r>')

--  Turn off highlighted results
nnoremap('<leader>no', '<cmd>noh<cr>')

--  Diagnostics
--[[
--  Go to previous diagnostic of any severity
nnoremap('[d', function()
    vim.diagnostic.goto_prev({})
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Go to next diagnostic of any severity
nnoremap(']d', function()
    vim.diagnostic.goto_next({})
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Go to previous ERROR diagnostic
nnoremap('[e', function()
    vim.diagnostic.goto_prev({
        severity = vim.diagnostic.severity.ERROR
    })
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Go to next ERROR diagnostic
nnoremap('[e', function()
    vim.diagnostic.goto_next({
        severity = vim.diagnostic.severity.ERROR
    })
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Go to previous WARNING diagnostic
nnoremap('[w', function()
    vim.diagnostic.goto_prev({
        severity = vim.diagnostic.severity.WARN
    })
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Go to next WARNING diagnostic
nnoremap('[w', function()
    vim.diagnostic.goto_next({
        severity = vim.diagnostic.severity.WARN
    })
    vim.api.nvim_feedkeys('zz', 'n', false)
end)

--  Open the diagnostic under the cursor, in a float window
nnoremap('<leader>d', function()
    vim.diagnostic.open_float({
        border = 'rounded',
    })
end)

--  Place all diagnostics into a qflist
nnoremap('<leader>ld', vim.diagnostic.setqflist, {
    desc = "Quickfix [L]ist [D]iagnostics"
})

--  Navigate to previous qflist item
nnoremap('<leader>cp', ':cprevious<cr>zz')

--  Navigate to next qflist item
nnoremap('<leader>cn', ':cnext<cr>zz')

--  Open the qflist
nnoremap('<leader>co', ':copen<cr>zz')

--  Close the qflist
nnoremap('<leader>cc', ':cclose<cr>zz')
]]
--  MaximizerToggle
--  szw/vim-maximizer
nnoremap('<leader>m', ':MaximizerToggle<cr>')

--  Resize split windows to be equal size
nnoremap('<leader>=', '<C-w>=')

--  Format
nnoremap('<leader>f', function()
    conform.format({
        async = true,
        lsp_fallback = true,
    })
end, {
    desc = "Format the current buffer"
})

--  Flip windows
nnoremap('<leader>fw', ':FlipWindows<cr>', {
    desc = "[F]lip [W]indows"
})

--  Open the link under the cursor
--  TODO:   Open plugin strings as GitHub links
nnoremap('gx', ':sil !open <cWORD><cr>', {
    silent = true
})

--+=+-- Harpoon --+=+--
--[[
--  Open Harpoon UI
nnoremap('<leader>ho', function()
    harpoon_ui.toggle_quick_menu()
end)

--  Add current file to Harpoon
nnoremap('<leader>ha', function()
    harpoon_mark.add_file()
end)

--  Remove current file from Harpoon
nnoremap('<leader>hr', function()
    harpoon_mark.rm_file()
end)

--  Clear files from Harpoon
nnoremap('<leader>hc', function()
    harpoon_mark.clear_all()
end)

--  Jump to first file in Harpoon
nnoremap('<leader>1', function()
    harpoon_mark.nav_file(1)
end)

--  Jump to second file in Harpoon
nnoremap('<leader>2', function()
    harpoon_mark.nav_file(2)
end)

--  Jump to third file in Harpoon
nnoremap('<leader>3', function()
    harpoon_mark.nav_file(3)
end)

--  Jump to fourth file in Harpoon
nnoremap('<leader>4', function()
    harpoon_mark.nav_file(4)
end)

--  Jump to fifth file in Harpoon
nnoremap('<leader>5', function()
    harpoon_mark.nav_file(5)
end)
]]
--+=+-- Git --+=+--
--[[
nnoremap(
    '<leader>gb',
    ':Gitsigns toggle_current_line_blame<cr>'
)

nnoremap(
    '<leader>gf',
    function()
        local cmd = {
            'sort',
            '-u',
            '<(git diff --name-only --cached)',
            '<(git diff --name-only)',
            '<(git diff --name-only --diff-filter=U)',
        }

        if not utils.is_git_directory() then
            vim.notify(
                "Current project is not a git directory",
                vim.log.levels.WARN,
                {
                    title = "Telescope Git Files",
                    git_command = cmd,
                }
            )
        else
            require('telescope.builtin').git_files()
        end
    end,
    { desc = "Search [G]it [F]iles" }
)
]]
--+=+-- Telescope --+=+--
--[[
nnoremap(
    '<leader>?',
    require('telescope.builtin').oldfiles,
    { desc = "[?] Find recently opened files" }
)

nnoremap(
    '<leader>sb',
    require('telescope.builtin').buffers,
    { desc = "[S]earch Open [B]uffers" }
)

nnoremap(
    '<leader>sf',
    function()
        require('telescope.builtin').find_files(
            { hidden = true }
        )
    end,
    { desc = "[S]earch [F]iles" }
)

nnoremap(
    '<leader>sh',
    require('telescope.builtin').help_tags,
    { desc = "[S]earch [H]elp" }
)

nnoremap(
    '<leader>sg',
    require('telescope.builtin').live_grep,
    { desc = "[S]earch by [G]rep" }
)

nnoremap(
    '<leader>sc',
    function()
        require('telescope.builtin').commands(
            require('telescope.themes').get_dropdown({
                previewer = false,
            })
        )
    end,
    { desc = "[S]earch [C]ommands" }
)

nnoremap(
    '<leader>/',
    function()
        require('telescope.builtin').current_buffer_fuzzy_find(
            require('telescope.themes').get_dropdown({
                previewer = false,
            })
        )
    end,
    { desc = "[/] Fuzzily search in current buffer" }
)

nnoremap(
    '<leader>ss',
    function()
        require('telescope.builtin').spell_suggest(
            require('telescope.themes').get_dropdown({
                previewer = false,
            })
        )
    end,
    { desc = "[S]earch [S]pelling suggestions" }
)
]]

--+=+-- LSP --+=+--
--  Exports a function to be used in ../../after/plugin/lsp.lua
--  References the current buffer
--[[
M.map_lsp_keybinds = function(buffer_number)
    nnoremap(
        '<leader>rn',
        vim.lsp.buf.rename,
        {
            desc = "LSP: [R]e[n]ame",
            buffer = buffer_number
        }
    )

    nnoremap(
        '<leader>ca',
        vim.lsp.buf.code_action,
        {
            desc = "LSP: [C]ode [A]ction",
            buffer = buffer_number,
        }
    )

    nnoremap(
        'gd',
        vim.lsp.buf.definition,
        {
            desc = "LSP: [G]oto [D]efinition",
            buffer = buffer_number
        }
    )

    --+=+-- Telescope --+=+--

    nnoremap(
        'gr',
        require('telescope.builtin').lsp_references,
        {
            desc = "LSP: [G]oto [R]eferences",
            buffer = buffer_number
        }
    )

    nnoremap(
        'gi',
        require('telescope.builtin').lsp_implementations,
        {
            desc = "LSP: [G]oto [I]mplementation",
            buffer = buffer_number
        }
    )

    nnoremap(
        '<leader>bs',
        require('telescope.builtin').lsp_document_symbols,
        {
            desc = "LSP: [B]uffer [S]ymbols",
            buffer = buffer_number
        }
    )

    nnoremap(
        '<leader>ps',
        require('telescope.builtin').lsp_workspace_symbols,
        {
            desc = "LSP: [P]roject [S]ymbols",
            buffer = buffer_number
        }
    )

    --  See `:help K`
    nnoremap(
        'K',
        vim.lsp.buf.hover,
        {
            desc = "LSP: Hover Documentation",
            buffer = buffer_number
        }
    )

    nnoremap(
        '<leader>k',
        vim.lsp.buf.signature_help,
        {
            desc = "LSP: Signature Documentation",
            buffer = buffer_number
        }
    )

    nnoremap(
        '<C-k>',
        vim.lsp.buf.signature_help,
        {
            desc = "LSP: Signature Documentation",
            buffer = buffer_number
        }
    )

    --  Lesser used LSP functionality
    nnoremap(
        'gD',
        vim.lsp.buf.declaration,
        {
            desc = "LSP: [G]oto [D]eclaration",
            buffer = buffer_number
        }
    )

    nnoremap(
        'td',
        vim.lsp.buf.type_definition,
        {
            desc = "LSP: [T]ype [D]efinition",
            buffer = buffer_number
        }
    )
end
]]
--+=+-- Symbol Outline --+=+--
--[[
nnoremap(
    '<leader>so',
    ':SymbolsOutline<cr>'
)
]]
--+=+-- nvim-ufo --+=+--
--[[
nnoremap('zR', require('ufo').openAllFolds)
nnoremap('zM', require('ufo').closeAllFolds)
]]
--+=+-- INSERT --+=+--

inoremap('jj', '<esc>')

--+=+-- VISUAL --+=+--

--  Disable `<Space>` bar, to avoid `<Leader>` interference
vnoremap('<space>', '<nop>')

--  Press `H`, `L` to jump to start/end of a line (first/last char)
--  TODO:   Use <Home>
nnoremap('H', '^')
--  TODO:   Use <End>
nnoremap('L', '$<left>')

--  Paste without losing the contents of the register
vnoremap('<A-j>', ":m '>+1<CR>gv=gv")
vnoremap('<A-k>', ":m '<-2<CR>gv=gv")

xnoremap("<leader>p", '"_dP')

--  Reselect the last visual selection
xnoremap('<<', function()
    --  Move selected text up/down
    vim.cmd('normal! <<')
    vim.cmd('normal! gv')
end)

xnoremap('>>', function()
    vim.cmd('normal! <<')
    vim.cmd('normal! gv')
end)

--+=+-- Terminal --+=+--
--  Enter normal mode while in a terminal
tnoremap('<esc>', [[<C-\><C-n>]])
tnoremap('jj', [[<C-\><C-n>]])

--  Window navigation from terminal
tnoremap('<C-h>', [[<Cmd>wincmd h<CR>]])
tnoremap('<C-j>', [[<Cmd>wincmd j<CR>]])
tnoremap('<C-k>', [[<Cmd>wincmd k<CR>]])
tnoremap('<C-l>', [[<Cmd>wincmd l<CR>]])

--  Re-enable default `<Space>` functionality to prevent input delay
tnoremap('<space>', '<space>')

return M
